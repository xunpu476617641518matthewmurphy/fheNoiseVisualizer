/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface AudioGuideFHEInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addAudioContent"
      | "appVisitors"
      | "audioContents"
      | "authorizeApp"
      | "authorizedApps"
      | "calculateRecommendation"
      | "contentCount"
      | "generateRecommendation"
      | "getAppVisitors"
      | "getAudioContent"
      | "getRecommendation"
      | "getVisitorBehavior"
      | "protocolId"
      | "recommendationCount"
      | "recommendations"
      | "recordVisitorBehavior"
      | "visitorBehaviors"
      | "visitorCount"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BehaviorRecorded"
      | "ContentAdded"
      | "DecryptionFulfilled"
      | "RecommendationGenerated"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addAudioContent",
    values: [BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "appVisitors",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "audioContents",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizeApp",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "authorizedApps",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateRecommendation",
    values: [BigNumberish, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "contentCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "generateRecommendation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getAppVisitors",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getAudioContent",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getRecommendation",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getVisitorBehavior",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recommendationCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "recommendations",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "recordVisitorBehavior",
    values: [BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "visitorBehaviors",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "visitorCount",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "addAudioContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "appVisitors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "audioContents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizeApp",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "authorizedApps",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateRecommendation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "contentCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "generateRecommendation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAppVisitors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getAudioContent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRecommendation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getVisitorBehavior",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "recommendationCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recommendations",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "recordVisitorBehavior",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "visitorBehaviors",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "visitorCount",
    data: BytesLike
  ): Result;
}

export namespace BehaviorRecordedEvent {
  export type InputTuple = [
    visitorId: BigNumberish,
    app: AddressLike,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [visitorId: bigint, app: string, timestamp: bigint];
  export interface OutputObject {
    visitorId: bigint;
    app: string;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ContentAddedEvent {
  export type InputTuple = [contentId: BigNumberish, timestamp: BigNumberish];
  export type OutputTuple = [contentId: bigint, timestamp: bigint];
  export interface OutputObject {
    contentId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace DecryptionFulfilledEvent {
  export type InputTuple = [requestID: BigNumberish];
  export type OutputTuple = [requestID: bigint];
  export interface OutputObject {
    requestID: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace RecommendationGeneratedEvent {
  export type InputTuple = [
    recommendationId: BigNumberish,
    visitorId: BigNumberish,
    timestamp: BigNumberish
  ];
  export type OutputTuple = [
    recommendationId: bigint,
    visitorId: bigint,
    timestamp: bigint
  ];
  export interface OutputObject {
    recommendationId: bigint;
    visitorId: bigint;
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface AudioGuideFHE extends BaseContract {
  connect(runner?: ContractRunner | null): AudioGuideFHE;
  waitForDeployment(): Promise<this>;

  interface: AudioGuideFHEInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addAudioContent: TypedContractMethod<
    [encryptedExhibitId: BytesLike, encryptedWeight: BytesLike],
    [void],
    "nonpayable"
  >;

  appVisitors: TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;

  audioContents: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint] & {
        contentId: bigint;
        exhibitId: string;
        contentWeight: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  authorizeApp: TypedContractMethod<[app: AddressLike], [void], "nonpayable">;

  authorizedApps: TypedContractMethod<[arg0: AddressLike], [boolean], "view">;

  calculateRecommendation: TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;

  contentCount: TypedContractMethod<[], [bigint], "view">;

  generateRecommendation: TypedContractMethod<
    [visitorId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getAppVisitors: TypedContractMethod<[app: AddressLike], [bigint[]], "view">;

  getAudioContent: TypedContractMethod<
    [contentId: BigNumberish],
    [[string, string]],
    "view"
  >;

  getRecommendation: TypedContractMethod<
    [recommendationId: BigNumberish],
    [string[]],
    "view"
  >;

  getVisitorBehavior: TypedContractMethod<
    [visitorId: BigNumberish],
    [[string[], string[]]],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  recommendationCount: TypedContractMethod<[], [bigint], "view">;

  recommendations: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        recommendationId: bigint;
        visitorId: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  recordVisitorBehavior: TypedContractMethod<
    [encryptedExhibitIds: BytesLike[], encryptedDwellTimes: BytesLike[]],
    [void],
    "nonpayable"
  >;

  visitorBehaviors: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint] & {
        visitorId: bigint;
        museumApp: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;

  visitorCount: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addAudioContent"
  ): TypedContractMethod<
    [encryptedExhibitId: BytesLike, encryptedWeight: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "appVisitors"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "audioContents"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, string, bigint] & {
        contentId: bigint;
        exhibitId: string;
        contentWeight: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "authorizeApp"
  ): TypedContractMethod<[app: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "authorizedApps"
  ): TypedContractMethod<[arg0: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "calculateRecommendation"
  ): TypedContractMethod<
    [requestId: BigNumberish, cleartexts: BytesLike, proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "contentCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "generateRecommendation"
  ): TypedContractMethod<[visitorId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getAppVisitors"
  ): TypedContractMethod<[app: AddressLike], [bigint[]], "view">;
  getFunction(
    nameOrSignature: "getAudioContent"
  ): TypedContractMethod<[contentId: BigNumberish], [[string, string]], "view">;
  getFunction(
    nameOrSignature: "getRecommendation"
  ): TypedContractMethod<[recommendationId: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getVisitorBehavior"
  ): TypedContractMethod<
    [visitorId: BigNumberish],
    [[string[], string[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recommendationCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "recommendations"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint] & {
        recommendationId: bigint;
        visitorId: bigint;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "recordVisitorBehavior"
  ): TypedContractMethod<
    [encryptedExhibitIds: BytesLike[], encryptedDwellTimes: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "visitorBehaviors"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, string, bigint] & {
        visitorId: bigint;
        museumApp: string;
        timestamp: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "visitorCount"
  ): TypedContractMethod<[], [bigint], "view">;

  getEvent(
    key: "BehaviorRecorded"
  ): TypedContractEvent<
    BehaviorRecordedEvent.InputTuple,
    BehaviorRecordedEvent.OutputTuple,
    BehaviorRecordedEvent.OutputObject
  >;
  getEvent(
    key: "ContentAdded"
  ): TypedContractEvent<
    ContentAddedEvent.InputTuple,
    ContentAddedEvent.OutputTuple,
    ContentAddedEvent.OutputObject
  >;
  getEvent(
    key: "DecryptionFulfilled"
  ): TypedContractEvent<
    DecryptionFulfilledEvent.InputTuple,
    DecryptionFulfilledEvent.OutputTuple,
    DecryptionFulfilledEvent.OutputObject
  >;
  getEvent(
    key: "RecommendationGenerated"
  ): TypedContractEvent<
    RecommendationGeneratedEvent.InputTuple,
    RecommendationGeneratedEvent.OutputTuple,
    RecommendationGeneratedEvent.OutputObject
  >;

  filters: {
    "BehaviorRecorded(uint256,address,uint256)": TypedContractEvent<
      BehaviorRecordedEvent.InputTuple,
      BehaviorRecordedEvent.OutputTuple,
      BehaviorRecordedEvent.OutputObject
    >;
    BehaviorRecorded: TypedContractEvent<
      BehaviorRecordedEvent.InputTuple,
      BehaviorRecordedEvent.OutputTuple,
      BehaviorRecordedEvent.OutputObject
    >;

    "ContentAdded(uint256,uint256)": TypedContractEvent<
      ContentAddedEvent.InputTuple,
      ContentAddedEvent.OutputTuple,
      ContentAddedEvent.OutputObject
    >;
    ContentAdded: TypedContractEvent<
      ContentAddedEvent.InputTuple,
      ContentAddedEvent.OutputTuple,
      ContentAddedEvent.OutputObject
    >;

    "DecryptionFulfilled(uint256)": TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;
    DecryptionFulfilled: TypedContractEvent<
      DecryptionFulfilledEvent.InputTuple,
      DecryptionFulfilledEvent.OutputTuple,
      DecryptionFulfilledEvent.OutputObject
    >;

    "RecommendationGenerated(uint256,uint256,uint256)": TypedContractEvent<
      RecommendationGeneratedEvent.InputTuple,
      RecommendationGeneratedEvent.OutputTuple,
      RecommendationGeneratedEvent.OutputObject
    >;
    RecommendationGenerated: TypedContractEvent<
      RecommendationGeneratedEvent.InputTuple,
      RecommendationGeneratedEvent.OutputTuple,
      RecommendationGeneratedEvent.OutputObject
    >;
  };
}
